算法面试是什么? .
让大家在面对面试中的算法问题时，有一个合理的思考路径;
●不代表能够“正确”回答每-个算法问题，但是合理的思考方向其实更重要,
也是正确完成算法面试问题的前提
●算法面试优秀不意味着技术面试优秀
●技术面试优秀不意味着能够拿到Offer

算法面试的目的不是给出一个正确的答案。而是展示给面试官你思考问题的方式
正确本身是一个相对的概念
把这个过程看做是和面试官一起探讨一个问题的解决方案
对于问题的细节可以和应用环境，可以和面试官沟通，这种沟通本事很重要，它暗示着你思考问题的方式

我们需要对一组数据进行排序

这组数据有什么样的特性？
有没有可能包含有大量的重复元素
如果有这种可能的话，三路快排是更好的选择
是否大部分数据距离它正确的位置很近？是否近乎有序？
如果是这样的话，插入排序是更好的选择
是否数据的取值范围非常有限？比如对学生成绩排序
如果是这样的话，计数排序是更好的选择
对排序有什么额外的需求？
是否需要稳定的排序？
如果是的话，归并排序是更好的选择
数据的存储状况是怎样的？
是否使用链表存储的
如果是的话，归并排序是最好的选择
数据的存储状况是怎样的？
数据的大小是否可以装载在内存里？
数据量很大，或者内存很小，不足以装载在内存里面，需要使用外的排序算法
●有没有可能包含有大量重复的元素?
●是否大部分数据距离它正确的位置很近?是否近乎有序?
●是否数据的取值范围非常有限?比如对学生成绩排序。
●是否需要稳定排序?
●是否是使用链表存储的?
●数据的大小是否可以装载在内存里?

正确还包含对问题的独到见解；优化；代码规范；容错性...


如果是非常难得问题，对你的竞争对手来说也是难得
关键在于你锁表达出来的解决思路
甚至通过表达解题思路的方向，得出结论：这个问题的解决方案
应该在哪一个领域，我可以通过查阅子类或者近一步学习解决问题


算法面试优秀并不意味着技术面试优秀
算法面试只是技术面试的一部分
根据你的简历和应聘职位的不同，势必要考察其他技术方面。
项目经历和项目中遇到的实际问题
你遇到印象之后最深的bug是什么？
面向对象 设计模式 网络相关；安全相关；内存相关；并发相关
系统设计；scalability

技术面试优秀不意味着能够拿到offer
技术面试只是面试的一部分。面试不仅仅是考察你的技术水平，还是了解你过去以及形成的思考行为方式
关于过去：参与项目至关重要
遇到过的最大挑战
犯过的错误
遭遇的失败
最想瘦的工作内容
遇到冲突的处理方式
做过的最与众不同的事儿

准备好合适的问题问面试官
整个小组大概运行模式是怎样的？
整个项目的后续规划是怎样的？
这个产品中的某个问题是如何解决的？
为什么会选择某些技术？标准？

如何准备算法面试？
准备面试和准备算法面试是2个概念
算法面试并没有那么难
远远不需要啃完一本《算法导论》
强调理论证明
高级数据结构和算法面试提及的概率很低
红黑树 计算几何 B-Tree 数论  斐波那契堆 FFT
远远不需要达到信息学竞赛的水平

不要轻视基础算法和数据结构，而只关注有意思的题目
各种排序的算法
基础数据结构和算法的实现：如堆、二叉树、图、、、
基础数据结构的使用：如链表、栈、队列、哈希表、图、Trie、并查集、、、
基础算法：深度优先、广度优先、二分查找、递归、、、
基本算法思想：递归、分治、回溯搜索、贪心、动态规划、、、


合适的QJ
online judge
在线判题系统
LeetCode   HackerRank（对问题的分类非常详细）


解决算法面试的整体思路

注意题目中的条件
给定一个有序数组。。。
有一些题目之后的条件本质是暗示：
设计一个O(nlongn)的算法  无需考虑额外空间 数据规模大概是1w

当没有思路的时候
自己给自己几个简单的测试用例，试验一下
不要忽视暴力解法。暴力解法通常时思考的起点

LeetCode第三题 在一个字符串中寻找没有重复字母的最长子串 如“abcabcbb” 结果为“abc”
对于字符串s的子串s[i...j]
试验O(n^2)的算法遍历i，j，可以得到所有的子串s[i..j]
使用O(length(s[i..j))的算法判断s[i..j]中是否含有重复字母

极端条件的判断
数组为空？字符串为空？数量为0？指针为null？
变量名 模块化 复用性

对于基本问题 可以白板面试














